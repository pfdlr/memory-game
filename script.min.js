const settings={blockNumbers:20,rowNumbers:5,gameBoard:document.querySelector(".game-board"),scoreBoard:document.querySelector(".game-moves"),clock:document.querySelector(".game-time"),blocks:[],checkedBloks:[],moves:0,blockImages:["img_01.png","img_02.png","img_03.png","img_04.png","img_05.png","img_06.png","img_07.png","img_08.png","img_09.png","img_10.png","img_11.png","img_12.png","img_13.png","img_14.png","img_15.png","img_16.png","img_17.png","img_18.png","img_19.png","img_20.png","img_21.png","img_22.png","img_23.png"],canGet:!0,tilePairs:0};let{blockNumbers:blockNumbers,rowNumbers:rowNumbers,gameBoard:gameBoard,scoreBoard:scoreBoard,blocks:blocks,checkedBloks:checkedBloks,moves:moves,blockImages:blockImages,canGet:canGet,tilePairs:tilePairs,clock:clock}=settings;function shuffle(e){for(let t=e.length-1;t>0;t--){const n=Math.floor(Math.random()*(t+1));[e[t],e[n]]=[e[n],e[t]]}return e}function startGame(){gameBoard.innerHTML="",gameBoard.style.backgroundImage="none",startBtn.innerText="RESTART",scoreBoard.innerHTML="0",resetTimer(),blocks=[],checkedBloks=[],moves=0,canGet=!0,tilePairs=0,shuffle(blockImages);for(let e=0;e<blockNumbers;e++)blocks.push(Math.floor(e/2));for(let e=blockNumbers-1;e>0;e--){const t=Math.floor(Math.random()*e),n=blocks[e];blocks[e]=blocks[t],blocks[t]=n}for(let e=0;e<blockNumbers;e++){const t=document.createElement("div");t.classList.add("game-tile"),gameBoard.appendChild(t),t.dataset.cardType=blocks[e],t.dataset.index=e,t.style.left=10+(t.offsetWidth+10)*(e%rowNumbers)+"px",t.style.top=10+(t.offsetHeight+10)*Math.floor(e/rowNumbers)+"px",t.addEventListener("click",this.tileClick.bind(this))}startTimer()}function tileClick(e){canGet&&(checkedBloks[0]&&checkedBloks[0].dataset.index===e.target.dataset.index||(checkedBloks.push(e.target),e.target.style.backgroundImage="url(./imgs/"+blockImages[e.target.dataset.cardType]+")"),2===checkedBloks.length&&(canGet=!1,checkedBloks[0].dataset.cardType===checkedBloks[1].dataset.cardType?setTimeout(deleteTiles.bind(this),500):setTimeout(resetTiles.bind(this),500),moves++,scoreBoard.innerText=moves))}function deleteTiles(){checkedBloks[0].remove(),checkedBloks[1].remove(),canGet=!0,checkedBloks=[],++tilePairs>=blockNumbers/2&&(stopTimer(),openModal(),timeDisplay.innerText=time,movesDisplay.innerText=moves,resetTimer(),scoreBoard.innerText="",startBtn.innerText="START")}function resetTiles(){checkedBloks[0].style.backgroundImage="url(./imgs/ppn.png)",checkedBloks[1].style.backgroundImage="url(./imgs/ppn.png)",checkedBloks=[],canGet=!0}const startBtn=document.getElementById("start-game");document.addEventListener("DOMContentLoaded",function(){startBtn.addEventListener("click",()=>startGame())});const minutes=document.querySelector(".minutes"),seconds=document.querySelector(".seconds");let interval,time,timerTime=0,isRunning=!1;function startTimer(){isRunning||(isRunning=!0,interval=setInterval(incrementTimer,1e3))}function stopTimer(){isRunning&&(isRunning=!1,clearInterval(interval))}function resetTimer(){stopTimer(),timerTime=0,minutes.innerText="00",seconds.innerText="00"}function incrementTimer(){timerTime++;const e=Math.floor(timerTime/60),t=timerTime%60;minutes.innerText=pad(e),seconds.innerText=pad(t),time=`${pad(e)}:${pad(t)}`}function pad(e){return e<10?"0"+e:e}const overlay=document.getElementById("modalOverlay"),modal=document.getElementById("finishModal"),closeButton=document.getElementById("closeButton"),timeDisplay=document.querySelector(".game-summary-time-display"),movesDisplay=document.querySelector(".game-summary-moves-display");function openModal(){overlay.style.display="block",modal.style.display="flex"}function closeModal(){overlay.style.display="none",modal.style.display="none",gameBoard.style.backgroundImage="url(./imgs/PPN_kolor.png)",gameBoard.style.backgroundRepeat="no-repeat"}closeButton.addEventListener("click",closeModal);